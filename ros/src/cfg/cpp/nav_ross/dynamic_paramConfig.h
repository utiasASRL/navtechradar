//#line 2 "C:\\opt\\ros\\melodic\\x64\\share\\dynamic_reconfigure\\templates\\ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the nav_ross package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __nav_ross__DYNAMIC_PARAMCONFIG_H__
#define __nav_ross__DYNAMIC_PARAMCONFIG_H__

#if __cplusplus >= 201103L
#define DYNAMIC_RECONFIGURE_FINAL final
#else
#define DYNAMIC_RECONFIGURE_FINAL
#endif

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace nav_ross
{
  class dynamic_paramConfigStatics;

  class dynamic_paramConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }

      virtual void clamp(dynamic_paramConfig &config, const dynamic_paramConfig &max, const dynamic_paramConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const dynamic_paramConfig &config1, const dynamic_paramConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, dynamic_paramConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const dynamic_paramConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, dynamic_paramConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const dynamic_paramConfig &config) const = 0;
      virtual void getValue(const dynamic_paramConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template <class T>
    class ParamDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T dynamic_paramConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T dynamic_paramConfig::* field;

      virtual void clamp(dynamic_paramConfig &config, const dynamic_paramConfig &max, const dynamic_paramConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const dynamic_paramConfig &config1, const dynamic_paramConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, dynamic_paramConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const dynamic_paramConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, dynamic_paramConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const dynamic_paramConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const dynamic_paramConfig &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, dynamic_paramConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template<class T, class PT>
    class GroupDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, dynamic_paramConfig &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T PT::* field;
      std::vector<dynamic_paramConfig::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(dynamic_paramConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("Phi"==(*_i)->name){Phi = boost::any_cast<double>(val);}
        if("ThreeDScanApp"==(*_i)->name){ThreeDScanApp = boost::any_cast<bool>(val);}
        if("maxangle"==(*_i)->name){maxangle = boost::any_cast<int>(val);}
        if("LaserScan2_Map"==(*_i)->name){LaserScan2_Map = boost::any_cast<bool>(val);}
        if("radarimage"==(*_i)->name){radarimage = boost::any_cast<bool>(val);}
        if("radarimageprocessing"==(*_i)->name){radarimageprocessing = boost::any_cast<bool>(val);}
        if("threshold_value"==(*_i)->name){threshold_value = boost::any_cast<int>(val);}
        if("pointcloud"==(*_i)->name){pointcloud = boost::any_cast<bool>(val);}
        if("pcl_threshold_value"==(*_i)->name){pcl_threshold_value = boost::any_cast<int>(val);}
        if("boundingboxes2"==(*_i)->name){boundingboxes2 = boost::any_cast<bool>(val);}
        if("MinAreaRect"==(*_i)->name){MinAreaRect = boost::any_cast<bool>(val);}
        if("longtermaverage"==(*_i)->name){longtermaverage = boost::any_cast<bool>(val);}
        if("dilation_value"==(*_i)->name){dilation_value = boost::any_cast<int>(val);}
        if("gaussian_value"==(*_i)->name){gaussian_value = boost::any_cast<int>(val);}
        if("adaptive_threshold"==(*_i)->name){adaptive_threshold = boost::any_cast<bool>(val);}
        if("level_above_average"==(*_i)->name){level_above_average = boost::any_cast<int>(val);}
        if("adaptive_size"==(*_i)->name){adaptive_size = boost::any_cast<int>(val);}
        if("grid"==(*_i)->name){grid = boost::any_cast<bool>(val);}
        if("grid_stepSize"==(*_i)->name){grid_stepSize = boost::any_cast<int>(val);}
        if("grid_opacity"==(*_i)->name){grid_opacity = boost::any_cast<double>(val);}
        if("colormap"==(*_i)->name){colormap = boost::any_cast<int>(val);}
      }
    }

    double Phi;
bool ThreeDScanApp;
int maxangle;
bool LaserScan2_Map;
bool radarimage;
bool radarimageprocessing;
int threshold_value;
bool pointcloud;
int pcl_threshold_value;
bool boundingboxes2;
bool MinAreaRect;
bool longtermaverage;
int dilation_value;
int gaussian_value;
bool adaptive_threshold;
int level_above_average;
int adaptive_size;
bool grid;
int grid_stepSize;
double grid_opacity;
int colormap;

    bool state;
    std::string name;

    
}groups;



//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      double Phi;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      bool ThreeDScanApp;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      int maxangle;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      bool LaserScan2_Map;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      bool radarimage;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      bool radarimageprocessing;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      int threshold_value;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      bool pointcloud;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      int pcl_threshold_value;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      bool boundingboxes2;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      bool MinAreaRect;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      bool longtermaverage;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      int dilation_value;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      int gaussian_value;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      bool adaptive_threshold;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      int level_above_average;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      int adaptive_size;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      bool grid;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      int grid_stepSize;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      double grid_opacity;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      int colormap;
//#line 228 "C:\\opt\\ros\\melodic\\x64\\share\\dynamic_reconfigure\\templates\\ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("dynamic_paramConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const dynamic_paramConfig &__max__ = __getMax__();
      const dynamic_paramConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const dynamic_paramConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const dynamic_paramConfig &__getDefault__();
    static const dynamic_paramConfig &__getMax__();
    static const dynamic_paramConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const dynamic_paramConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void dynamic_paramConfig::ParamDescription<std::string>::clamp(dynamic_paramConfig &config, const dynamic_paramConfig &max, const dynamic_paramConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class dynamic_paramConfigStatics
  {
    friend class dynamic_paramConfig;

    dynamic_paramConfigStatics()
    {
dynamic_paramConfig::GroupDescription<dynamic_paramConfig::DEFAULT, dynamic_paramConfig> Default("Default", "", 0, 0, true, &dynamic_paramConfig::groups);
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __min__.Phi = 0.0;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __max__.Phi = 360.0;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __default__.Phi = 0.0;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      Default.abstract_parameters.push_back(dynamic_paramConfig::AbstractParamDescriptionConstPtr(new dynamic_paramConfig::ParamDescription<double>("Phi", "double", 0, "3D angle", "", &dynamic_paramConfig::Phi)));
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __param_descriptions__.push_back(dynamic_paramConfig::AbstractParamDescriptionConstPtr(new dynamic_paramConfig::ParamDescription<double>("Phi", "double", 0, "3D angle", "", &dynamic_paramConfig::Phi)));
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __min__.ThreeDScanApp = 0;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __max__.ThreeDScanApp = 1;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __default__.ThreeDScanApp = 0;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      Default.abstract_parameters.push_back(dynamic_paramConfig::AbstractParamDescriptionConstPtr(new dynamic_paramConfig::ParamDescription<bool>("ThreeDScanApp", "bool", 0, "Publish 3dpcl", "", &dynamic_paramConfig::ThreeDScanApp)));
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __param_descriptions__.push_back(dynamic_paramConfig::AbstractParamDescriptionConstPtr(new dynamic_paramConfig::ParamDescription<bool>("ThreeDScanApp", "bool", 0, "Publish 3dpcl", "", &dynamic_paramConfig::ThreeDScanApp)));
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __min__.maxangle = 0;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __max__.maxangle = 180;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __default__.maxangle = 69;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      Default.abstract_parameters.push_back(dynamic_paramConfig::AbstractParamDescriptionConstPtr(new dynamic_paramConfig::ParamDescription<int>("maxangle", "int", 0, "max angle for radar", "", &dynamic_paramConfig::maxangle)));
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __param_descriptions__.push_back(dynamic_paramConfig::AbstractParamDescriptionConstPtr(new dynamic_paramConfig::ParamDescription<int>("maxangle", "int", 0, "max angle for radar", "", &dynamic_paramConfig::maxangle)));
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __min__.LaserScan2_Map = 0;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __max__.LaserScan2_Map = 1;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __default__.LaserScan2_Map = 0;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      Default.abstract_parameters.push_back(dynamic_paramConfig::AbstractParamDescriptionConstPtr(new dynamic_paramConfig::ParamDescription<bool>("LaserScan2_Map", "bool", 0, "Publish Laser scan", "", &dynamic_paramConfig::LaserScan2_Map)));
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __param_descriptions__.push_back(dynamic_paramConfig::AbstractParamDescriptionConstPtr(new dynamic_paramConfig::ParamDescription<bool>("LaserScan2_Map", "bool", 0, "Publish Laser scan", "", &dynamic_paramConfig::LaserScan2_Map)));
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __min__.radarimage = 0;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __max__.radarimage = 1;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __default__.radarimage = 0;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      Default.abstract_parameters.push_back(dynamic_paramConfig::AbstractParamDescriptionConstPtr(new dynamic_paramConfig::ParamDescription<bool>("radarimage", "bool", 0, "Enable radarimage", "", &dynamic_paramConfig::radarimage)));
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __param_descriptions__.push_back(dynamic_paramConfig::AbstractParamDescriptionConstPtr(new dynamic_paramConfig::ParamDescription<bool>("radarimage", "bool", 0, "Enable radarimage", "", &dynamic_paramConfig::radarimage)));
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __min__.radarimageprocessing = 0;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __max__.radarimageprocessing = 1;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __default__.radarimageprocessing = 0;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      Default.abstract_parameters.push_back(dynamic_paramConfig::AbstractParamDescriptionConstPtr(new dynamic_paramConfig::ParamDescription<bool>("radarimageprocessing", "bool", 0, "Enable radarimage processing", "", &dynamic_paramConfig::radarimageprocessing)));
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __param_descriptions__.push_back(dynamic_paramConfig::AbstractParamDescriptionConstPtr(new dynamic_paramConfig::ParamDescription<bool>("radarimageprocessing", "bool", 0, "Enable radarimage processing", "", &dynamic_paramConfig::radarimageprocessing)));
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __min__.threshold_value = 0;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __max__.threshold_value = 255;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __default__.threshold_value = 62;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      Default.abstract_parameters.push_back(dynamic_paramConfig::AbstractParamDescriptionConstPtr(new dynamic_paramConfig::ParamDescription<int>("threshold_value", "int", 0, "Threshold parameter1", "", &dynamic_paramConfig::threshold_value)));
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __param_descriptions__.push_back(dynamic_paramConfig::AbstractParamDescriptionConstPtr(new dynamic_paramConfig::ParamDescription<int>("threshold_value", "int", 0, "Threshold parameter1", "", &dynamic_paramConfig::threshold_value)));
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __min__.pointcloud = 0;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __max__.pointcloud = 1;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __default__.pointcloud = 0;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      Default.abstract_parameters.push_back(dynamic_paramConfig::AbstractParamDescriptionConstPtr(new dynamic_paramConfig::ParamDescription<bool>("pointcloud", "bool", 0, "Enable pointcloud postprocessing", "", &dynamic_paramConfig::pointcloud)));
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __param_descriptions__.push_back(dynamic_paramConfig::AbstractParamDescriptionConstPtr(new dynamic_paramConfig::ParamDescription<bool>("pointcloud", "bool", 0, "Enable pointcloud postprocessing", "", &dynamic_paramConfig::pointcloud)));
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __min__.pcl_threshold_value = 0;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __max__.pcl_threshold_value = 255;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __default__.pcl_threshold_value = 62;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      Default.abstract_parameters.push_back(dynamic_paramConfig::AbstractParamDescriptionConstPtr(new dynamic_paramConfig::ParamDescription<int>("pcl_threshold_value", "int", 0, "pcl Threshold parameter1", "", &dynamic_paramConfig::pcl_threshold_value)));
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __param_descriptions__.push_back(dynamic_paramConfig::AbstractParamDescriptionConstPtr(new dynamic_paramConfig::ParamDescription<int>("pcl_threshold_value", "int", 0, "pcl Threshold parameter1", "", &dynamic_paramConfig::pcl_threshold_value)));
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __min__.boundingboxes2 = 0;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __max__.boundingboxes2 = 1;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __default__.boundingboxes2 = 0;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      Default.abstract_parameters.push_back(dynamic_paramConfig::AbstractParamDescriptionConstPtr(new dynamic_paramConfig::ParamDescription<bool>("boundingboxes2", "bool", 0, "Enable bounding boxes 2 postprocessing", "", &dynamic_paramConfig::boundingboxes2)));
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __param_descriptions__.push_back(dynamic_paramConfig::AbstractParamDescriptionConstPtr(new dynamic_paramConfig::ParamDescription<bool>("boundingboxes2", "bool", 0, "Enable bounding boxes 2 postprocessing", "", &dynamic_paramConfig::boundingboxes2)));
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __min__.MinAreaRect = 0;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __max__.MinAreaRect = 1;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __default__.MinAreaRect = 0;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      Default.abstract_parameters.push_back(dynamic_paramConfig::AbstractParamDescriptionConstPtr(new dynamic_paramConfig::ParamDescription<bool>("MinAreaRect", "bool", 0, "Highlight Objects with Min Area Rectangles", "", &dynamic_paramConfig::MinAreaRect)));
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __param_descriptions__.push_back(dynamic_paramConfig::AbstractParamDescriptionConstPtr(new dynamic_paramConfig::ParamDescription<bool>("MinAreaRect", "bool", 0, "Highlight Objects with Min Area Rectangles", "", &dynamic_paramConfig::MinAreaRect)));
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __min__.longtermaverage = 0;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __max__.longtermaverage = 1;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __default__.longtermaverage = 0;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      Default.abstract_parameters.push_back(dynamic_paramConfig::AbstractParamDescriptionConstPtr(new dynamic_paramConfig::ParamDescription<bool>("longtermaverage", "bool", 0, "static radar for long term averaging", "", &dynamic_paramConfig::longtermaverage)));
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __param_descriptions__.push_back(dynamic_paramConfig::AbstractParamDescriptionConstPtr(new dynamic_paramConfig::ParamDescription<bool>("longtermaverage", "bool", 0, "static radar for long term averaging", "", &dynamic_paramConfig::longtermaverage)));
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __min__.dilation_value = 0;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __max__.dilation_value = 20;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __default__.dilation_value = 2;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      Default.abstract_parameters.push_back(dynamic_paramConfig::AbstractParamDescriptionConstPtr(new dynamic_paramConfig::ParamDescription<int>("dilation_value", "int", 0, "dilation_value", "", &dynamic_paramConfig::dilation_value)));
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __param_descriptions__.push_back(dynamic_paramConfig::AbstractParamDescriptionConstPtr(new dynamic_paramConfig::ParamDescription<int>("dilation_value", "int", 0, "dilation_value", "", &dynamic_paramConfig::dilation_value)));
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __min__.gaussian_value = 0;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __max__.gaussian_value = 15;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __default__.gaussian_value = 5;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      Default.abstract_parameters.push_back(dynamic_paramConfig::AbstractParamDescriptionConstPtr(new dynamic_paramConfig::ParamDescription<int>("gaussian_value", "int", 0, "gaussian_value", "", &dynamic_paramConfig::gaussian_value)));
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __param_descriptions__.push_back(dynamic_paramConfig::AbstractParamDescriptionConstPtr(new dynamic_paramConfig::ParamDescription<int>("gaussian_value", "int", 0, "gaussian_value", "", &dynamic_paramConfig::gaussian_value)));
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __min__.adaptive_threshold = 0;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __max__.adaptive_threshold = 1;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __default__.adaptive_threshold = 0;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      Default.abstract_parameters.push_back(dynamic_paramConfig::AbstractParamDescriptionConstPtr(new dynamic_paramConfig::ParamDescription<bool>("adaptive_threshold", "bool", 0, "Enable adaptive thresholding", "", &dynamic_paramConfig::adaptive_threshold)));
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __param_descriptions__.push_back(dynamic_paramConfig::AbstractParamDescriptionConstPtr(new dynamic_paramConfig::ParamDescription<bool>("adaptive_threshold", "bool", 0, "Enable adaptive thresholding", "", &dynamic_paramConfig::adaptive_threshold)));
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __min__.level_above_average = 0;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __max__.level_above_average = 100;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __default__.level_above_average = 52;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      Default.abstract_parameters.push_back(dynamic_paramConfig::AbstractParamDescriptionConstPtr(new dynamic_paramConfig::ParamDescription<int>("level_above_average", "int", 0, "Level above the average to determine point", "", &dynamic_paramConfig::level_above_average)));
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __param_descriptions__.push_back(dynamic_paramConfig::AbstractParamDescriptionConstPtr(new dynamic_paramConfig::ParamDescription<int>("level_above_average", "int", 0, "Level above the average to determine point", "", &dynamic_paramConfig::level_above_average)));
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __min__.adaptive_size = 0;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __max__.adaptive_size = 15;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __default__.adaptive_size = 5;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      Default.abstract_parameters.push_back(dynamic_paramConfig::AbstractParamDescriptionConstPtr(new dynamic_paramConfig::ParamDescription<int>("adaptive_size", "int", 0, "size of calculated mean search area", "", &dynamic_paramConfig::adaptive_size)));
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __param_descriptions__.push_back(dynamic_paramConfig::AbstractParamDescriptionConstPtr(new dynamic_paramConfig::ParamDescription<int>("adaptive_size", "int", 0, "size of calculated mean search area", "", &dynamic_paramConfig::adaptive_size)));
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __min__.grid = 0;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __max__.grid = 1;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __default__.grid = 0;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      Default.abstract_parameters.push_back(dynamic_paramConfig::AbstractParamDescriptionConstPtr(new dynamic_paramConfig::ParamDescription<bool>("grid", "bool", 0, "Enable grid", "", &dynamic_paramConfig::grid)));
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __param_descriptions__.push_back(dynamic_paramConfig::AbstractParamDescriptionConstPtr(new dynamic_paramConfig::ParamDescription<bool>("grid", "bool", 0, "Enable grid", "", &dynamic_paramConfig::grid)));
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __min__.grid_stepSize = 0;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __max__.grid_stepSize = 1000;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __default__.grid_stepSize = 10;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      Default.abstract_parameters.push_back(dynamic_paramConfig::AbstractParamDescriptionConstPtr(new dynamic_paramConfig::ParamDescription<int>("grid_stepSize", "int", 0, "grid step size", "", &dynamic_paramConfig::grid_stepSize)));
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __param_descriptions__.push_back(dynamic_paramConfig::AbstractParamDescriptionConstPtr(new dynamic_paramConfig::ParamDescription<int>("grid_stepSize", "int", 0, "grid step size", "", &dynamic_paramConfig::grid_stepSize)));
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __min__.grid_opacity = 0.0;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __max__.grid_opacity = 1.0;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __default__.grid_opacity = 0.5;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      Default.abstract_parameters.push_back(dynamic_paramConfig::AbstractParamDescriptionConstPtr(new dynamic_paramConfig::ParamDescription<double>("grid_opacity", "double", 0, "grid opacity", "", &dynamic_paramConfig::grid_opacity)));
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __param_descriptions__.push_back(dynamic_paramConfig::AbstractParamDescriptionConstPtr(new dynamic_paramConfig::ParamDescription<double>("grid_opacity", "double", 0, "grid opacity", "", &dynamic_paramConfig::grid_opacity)));
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __min__.colormap = 0;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __max__.colormap = 10;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __default__.colormap = 10;
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      Default.abstract_parameters.push_back(dynamic_paramConfig::AbstractParamDescriptionConstPtr(new dynamic_paramConfig::ParamDescription<int>("colormap", "int", 0, "colormap profile", "", &dynamic_paramConfig::colormap)));
//#line 274 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __param_descriptions__.push_back(dynamic_paramConfig::AbstractParamDescriptionConstPtr(new dynamic_paramConfig::ParamDescription<int>("colormap", "int", 0, "colormap profile", "", &dynamic_paramConfig::colormap)));
//#line 246 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      Default.convertParams();
//#line 246 "C:\opt\ros\melodic\x64\lib\site-packages\dynamic_reconfigure\parameter_generator.py"
      __group_descriptions__.push_back(dynamic_paramConfig::AbstractGroupDescriptionConstPtr(new dynamic_paramConfig::GroupDescription<dynamic_paramConfig::DEFAULT, dynamic_paramConfig>(Default)));
//#line 366 "C:\\opt\\ros\\melodic\\x64\\share\\dynamic_reconfigure\\templates\\ConfigType.h.template"

      for (std::vector<dynamic_paramConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<dynamic_paramConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<dynamic_paramConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    dynamic_paramConfig __max__;
    dynamic_paramConfig __min__;
    dynamic_paramConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const dynamic_paramConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static dynamic_paramConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &dynamic_paramConfig::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const dynamic_paramConfig &dynamic_paramConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const dynamic_paramConfig &dynamic_paramConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const dynamic_paramConfig &dynamic_paramConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<dynamic_paramConfig::AbstractParamDescriptionConstPtr> &dynamic_paramConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<dynamic_paramConfig::AbstractGroupDescriptionConstPtr> &dynamic_paramConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const dynamic_paramConfigStatics *dynamic_paramConfig::__get_statics__()
  {
    const static dynamic_paramConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = dynamic_paramConfigStatics::get_instance();

    return statics;
  }


}

#undef DYNAMIC_RECONFIGURE_FINAL

#endif // __DYNAMIC_PARAMRECONFIGURATOR_H__
